{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","className","style","this","props","color","background","React","Component","Board","i","j","key","toString","playground","pos","len","row","snake","includes","push","renderSquare","food","newRow","boardStyle","opacity","game","Control","onClick","Warning","length","Game","handleKeyPress","event","state","addition","newPos","undefined","newSnake","slice","setState","eatFood","generateFood","console","log","Math","pow","unshift","pop","newFood","floor","random","document","addEventListener","removeEventListener","reset","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48773006.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Square extends React.Component {\n\n  render() {\n    return (\n      <button className=\"square\" style={(this.props.color===\"#fff\")?{}:{background: this.props.color}}>\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n\n  renderSquare(i,j, color = \"#fff\") {\n    return <Square key ={[i,j].toString()} color = {color} />\n  }\n\n  render() {\n    const playground = [];\n    var pos = 0;\n    var len = this.props.len;\n    for(let i = 0; i < len; i++){\n  \n      const row = [];\n      \n      for(let j = 0; j < 10; j++){\n        if(this.props.snake.includes(pos)){\n          row.push(this.renderSquare(i,j,\"#060606\"))\n          pos+=1;\n          continue;\n        }\n        if(this.props.food === pos){\n          row.push(this.renderSquare(i,j,\"gold\"))\n          pos+=1;\n          continue;\n        }\n        row.push(this.renderSquare(i,j))\n        pos+=1;\n      }\n      const newRow =  <div className=\"board-row\" key = {i}>{row}</div>\n      playground.push(newRow)\n    }\n\n    let boardStyle = {\n      opacity: 1.0\n    };\n      if (!this.props.game) {\n        boardStyle = {\n          opacity:0.5\n        }  \n    }\n\n    return (\n      <div style={boardStyle}>\n        {playground}\n      </div>\n    );\n  }\n}\n\nclass Control extends React.Component{\n  render() {\n    return (\n      <button className=\"control\" onClick={() => this.props.onClick()}>\n      </button>\n    );\n  }\n}\n\nfunction Warning(props){\n  if(props.game){\n    return null;\n  }\n  return (<div className=\"warning\"><h1>Your game ends!</h1>\n          <h1>Your score is {props.snake.length}.</h1></div>)\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      len: 10,\n      snake: [0],\n      food:undefined,\n      game: true,\n    };\n  }\n\n  generateFood(){\n    var newFood = undefined;\n    do{\n      newFood = Math.floor(Math.random() * Math.pow(10,2))\n    }\n      while(this.state.snake.includes(newFood));\n      this.setState(({\n        food: newFood\n      })) \n  }\n\n  eatFood(food){\n    var newSnake = this.state.snake.slice();\n    newSnake.unshift(food);\n    this.setState({snake: newSnake})\n  }\n\n  handleKeyPress = (event) => {\n    if(!this.state.game){\n      return;\n    }\n    var addition = this.state.len\n    var newPos = undefined;\n    var food =this.state.food;\n    var newSnake = this.state.snake.slice();\n    switch (event.key) {\n    case \"ArrowDown\":\n      newPos = newSnake[0]+addition;\n      break;\n    case \"ArrowUp\":\n      newPos = newSnake[0]-addition;\n      break;\n    case \"ArrowLeft\":\n      newPos = newSnake[0]-1; \n      if (newPos%10===9){\n        this.setState({game:false})\n        return;\n      }\n      break;\n    case \"ArrowRight\":\n      newPos = newSnake[0]+1;\n      if (newPos%10===0){\n        this.setState({game:false})\n        return;\n      }\n      break;\n    default:\n      this.setState({game:false})\n      return;\n    }\n    if (newPos === food){\n      this.eatFood(food);\n      this.generateFood();\n      console.log(this.state.snake)\n      return;\n    }\n    if (newPos < 0 || newSnake.includes(newPos) || newPos > Math.pow(10,2)-1){\n      this.setState({game:false})\n      return;\n    }\n    newSnake.unshift(newPos);\n    newSnake.pop();\n    this.setState({snake: newSnake})\n  }\n\n  componentDidMount(){\n    this.generateFood();\n    document.addEventListener(\"keydown\", this.handleKeyPress, false);\n  }\n\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.handleKeyPress, false);\n  }\n\n  reset(){\n    this.setState({snake: [0],game:true,});\n    this.generateFood();\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Warning game={this.state.game} snake={this.state.snake}/>\n          <Board snake={this.state.snake} len ={this.state.len} food={this.state.food} game={this.state.game}/>\n        </div>\n        <div className=\"side-board\">\n          <h2 className=\"title\"> Reset game </h2>\n          <Control onClick={()=>this.reset()}/>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nfunction App() {\n  \n  return (\n    <Game />\n  )\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}